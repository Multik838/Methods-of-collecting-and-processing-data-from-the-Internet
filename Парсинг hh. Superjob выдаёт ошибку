{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "stock-massage",
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup as bs\n",
    "import requests\n",
    "import re\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "material-yacht",
   "metadata": {},
   "outputs": [],
   "source": [
    "def _parser_hh(vacancy):\n",
    "    global last_page\n",
    "\n",
    "    vacancy_date = []\n",
    "    page = 0\n",
    "    params = {\n",
    "        'text': vacancy, \\\n",
    "        'search_field': 'name', \\\n",
    "        'items_on_page': '100', \\\n",
    "        'page': ''\n",
    "    }\n",
    "    \n",
    "    headers = {\n",
    "        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0'\n",
    "    }\n",
    "\n",
    "    link = 'https://hh.ru/search/vacancy'\n",
    "       \n",
    "    html = requests.get(link, params=params, headers=headers)\n",
    "    \n",
    "    if html.ok:\n",
    "        parsed_html = bs(html.text,'html.parser')\n",
    "        \n",
    "        page_block = parsed_html.find('div', {'data-qa': 'pager-block'})\n",
    "        if not page_block:\n",
    "            last_page = '1'\n",
    "        else:\n",
    "            last_page = int(page_block.find_all('span', {'class': 'bloko-button bloko-button_pressed'})[-1].getText())\n",
    "    \n",
    "    for page in range(0, last_page):\n",
    "        params['page'] = page\n",
    "        html = requests.get(link, params=params, headers=headers)\n",
    "        \n",
    "        if html.ok:\n",
    "            parsed_html = bs(html.text,'html.parser')\n",
    "            \n",
    "            vacancy_items = parsed_html.find('div', {'data-qa': 'vacancy-serp__results'}).find_all('div', {'class': 'vacancy-serp-item'})\n",
    "                \n",
    "            for item in vacancy_items:\n",
    "                vacancy_date.append(_parser_item_hh(item))\n",
    "                \n",
    "    return vacancy_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "spare-information",
   "metadata": {},
   "outputs": [],
   "source": [
    "def _parser_item_hh(item):\n",
    "\n",
    "    vacancy_date = {}\n",
    "    \n",
    "    # vacancy_name\n",
    "    vacancy_name = item.find('span', {'class': 'resume-search-item__name'}).getText().replace(u'\\xa0', u' ')\n",
    "\n",
    "    \n",
    "    vacancy_date['vacancy_name'] = vacancy_name\n",
    "    \n",
    "    # company_name\n",
    "    company_name = item.find('div', {'class': 'vacancy-serp-item__meta-info'}).find('a').getText()\n",
    "    \n",
    "    vacancy_date['company_name'] = company_name\n",
    "    \n",
    "    # city\n",
    "    city = item.find('span', {'class': 'vacancy-serp-item__meta-info'}).getText().split(', ')[0]\n",
    "    \n",
    "    vacancy_date['city'] = city\n",
    "    \n",
    "    #metro station\n",
    "    metro_station = item.find('span', {'class': 'vacancy-serp-item__meta-info'}).findChild()\n",
    "\n",
    "    if not metro_station:\n",
    "        metro_station = None\n",
    "    else:\n",
    "        metro_station = metro_station.getText()\n",
    "        \n",
    "    vacancy_date['metro_station'] = metro_station\n",
    "    \n",
    "    #salary\n",
    "    salary = item.find('div', {'class': 'vacancy-serp-item__compensation'})\n",
    "    if not salary:\n",
    "        salary_min = None\n",
    "        salary_max = None\n",
    "        salary_currency = None\n",
    "    else:\n",
    "        salary = salary.getText().replace(u'\\xa0', u'')\n",
    "        \n",
    "        salary = re.split(r'\\s|-', salary)\n",
    "        \n",
    "        if salary[0] == 'до':\n",
    "            salary_min = None\n",
    "            salary_max = int(salary[1])\n",
    "        elif salary[0] == 'от':\n",
    "            salary_min = int(salary[1])\n",
    "            salary_max = None\n",
    "        else:\n",
    "            salary_min = int(salary[0])\n",
    "            salary_max = int(salary[1])            \n",
    "        \n",
    "        salary_currency = salary[2]\n",
    "        \n",
    "    vacancy_date['salary_min'] = salary_min\n",
    "    vacancy_date['salary_max'] = salary_max\n",
    "    vacancy_date['salary_currency'] = salary_currency\n",
    "    \n",
    "#     # link\n",
    "#     is_ad = item.find('div', {'data-qa': 'vacancy-serp__vacancy vacancy-serp__vacancy_standard'}).getText()\n",
    "    \n",
    "#     vacancy_link = item.find('a', {'data-qa': 'vacancy-serp__vacancy-title'})['href']\n",
    "    \n",
    "#     if is_ad != 'Реклама':\n",
    "#         vacancy_link = vacancy_link.split('?')[0]\n",
    "    \n",
    "#     vacancy_date['vacancy_link'] = vacancy_link \n",
    "    \n",
    "     # site\n",
    "    vacancy_date['site'] = 'hh.ru'\n",
    "    \n",
    "    return vacancy_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "satisfied-camcorder",
   "metadata": {},
   "outputs": [],
   "source": [
    "# def superjob(main_link, search_str, n_str):\n",
    "#     headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n",
    "#                          'Chrome/89.0.4389.105 YaBrowser/21.3.3.230 Yowser/2.5 Safari/537.36'}\n",
    "#     #https://www.superjob.ru/vacancy/search/?keywords=fyfkbnbr&geo%5Bt%5D%5B0%5D=4\n",
    "#     #n_str - кол-во просматриваемых страниц\n",
    "#     search_str ={}\n",
    "#     main_link = 'https://superjob.ru'\n",
    "#     keywords = 'Аналитик'\n",
    "#     params = {'keywords': keywords}\n",
    "#     base_url=requests.get(main_link + '/vacancy/search/',params = params, headers=headers)\n",
    "#     vacancy_date = []\n",
    "#     session = requests.Session()\n",
    "#     for i in range(n_str):\n",
    "#         request = session.get(base_url)\n",
    "#         if request.status_code == 200:\n",
    "#             soup = bs(request.content, 'lxml')\n",
    "#             divs = soup.find_all('div', {'class':'_3zucV _2GPIV f-test-vacancy-item i6-sc _3VcZr'})\n",
    "#             for div in divs:\n",
    "#                 title = div.find('div', {'class': '_3mfro CuJz5 PlM3e _2JVkc _3LJqf'}).text\n",
    "#                 href = div.find('div', {'class': '_3mfro CuJz5 PlM3e _2JVkc _3LJqf'}).findParent()['href']\n",
    "#                 salary = div.find('span', {'class': '_3mfro _2Wp8I f-test-text-company-item-salary PlM3e _2JVkc _2VHxz'}).text\n",
    "#                 salary=salary.replace(u'\\xa0', u'')\n",
    "#                 if '—' in salary:\n",
    "#                     salary_min = salary.split('—')[0]\n",
    "#                     salary_min = re.sub(r'[^0-9]', '', salary_min)\n",
    "#                     salary_max = salary.split('—')[1]\n",
    "#                     salary_max = re.sub(r'[^0-9]', '', salary_max)\n",
    "#                     salary_min = int(salary_min)\n",
    "#                     salary_max = int(salary_max)\n",
    "#                 elif 'от' in salary:\n",
    "#                     salary_min = salary[2:]\n",
    "#                     salary_min = re.sub(r'[^0-9]', '', salary_min)\n",
    "#                     salary_min = int(salary_min)\n",
    "#                     salary_max = None\n",
    "#                 elif 'договорённости' in salary:\n",
    "#                     salary_min = None\n",
    "#                     salary_max = None\n",
    "#                 elif 'до' in salary:\n",
    "#                     salary_min = None\n",
    "#                     salary_max = salary[2:]\n",
    "#                     salary_max = re.sub(r'[^0-9]', '', salary_max)\n",
    "#                     salary_max = int(salary_max)\n",
    "#                 else:\n",
    "#                     salary_min = int(re.sub(r'[^0-9]', '', salary))\n",
    "#                     salary_max = int(re.sub(r'[^0-9]', '', salary))\n",
    "\n",
    "#                 jobs.append({\n",
    "#                     'title': title,\n",
    "#                     'href': 'https://www.superjob.ru'+href,\n",
    "#                     'salary_min': salary_min,\n",
    "#                     'salary_max': salary_max,\n",
    "#                     'link': main_link\n",
    "#                 })\n",
    "#             base_url = main_link + \\\n",
    "#                        soup.find('a', {'class': 'icMQ_ _1_Cht _3ze9n f-test-button-dalshe f-test-link-dalshe'})['href']\n",
    "#             time.sleep(random.randint(1,10))\n",
    "#         else:\n",
    "#             print('Ошибка')\n",
    "\n",
    "#     return vacancy_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "suited-pantyhose",
   "metadata": {},
   "outputs": [],
   "source": [
    "def parser_vacancy(vacancy):\n",
    "    vacancy_date = []\n",
    "    vacancy_date.extend(_parser_hh(vacancy))\n",
    "#    vacancy_date.extend(superjob(vacancy_date, search_str, n_str))\n",
    "#    search_str='Python'\n",
    "#    n_str=2\n",
    "# def parser_vacancy(vacancy, search_str, n_str):\n",
    "\n",
    "    df = pd.DataFrame(vacancy_date)\n",
    "\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "likely-sociology",
   "metadata": {},
   "outputs": [],
   "source": [
    "vacancy = 'Python'\n",
    "# search_str='Python'\n",
    "# n_str=2\n",
    "# df = parser_vacancy(vacancy, search_str, n_str)\n",
    "df = parser_vacancy(vacancy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fundamental-genius",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vacancy_name</th>\n",
       "      <th>company_name</th>\n",
       "      <th>city</th>\n",
       "      <th>metro_station</th>\n",
       "      <th>salary_min</th>\n",
       "      <th>salary_max</th>\n",
       "      <th>salary_currency</th>\n",
       "      <th>site</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Python Developer (New Product)</td>\n",
       "      <td>Wargaming, Moscow</td>\n",
       "      <td>Минск</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Data/ML Python Developer</td>\n",
       "      <td>Tomi.ai</td>\n",
       "      <td>Москва</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Python developer</td>\n",
       "      <td>Oxagile</td>\n",
       "      <td>Минск</td>\n",
       "      <td>Михалово</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Python Developer (World of Tanks Blitz)</td>\n",
       "      <td>Wargaming, Minsk (Game Stream)</td>\n",
       "      <td>Минск</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Junior Data Developer (Python)</td>\n",
       "      <td>DataFork</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Лубянка</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Middle Python developer (в Сочи)</td>\n",
       "      <td>ООО Привет, Интернет</td>\n",
       "      <td>Сочи</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Python-специалист</td>\n",
       "      <td>ООО Digital Reputation</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Новокузнецкая</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Python developer</td>\n",
       "      <td>NetworkOptix</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Бауманская</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Python разработчик</td>\n",
       "      <td>АО Семейный доктор</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Баррикадная</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Junior разработчик Python Django</td>\n",
       "      <td>ООО Инсейлс Рус</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Комсомольская</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Разработчик Python</td>\n",
       "      <td>ООО Доверенная среда</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Румянцево</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Разработчик ботов Python (Junior)</td>\n",
       "      <td>Pyrus</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Панфиловская</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>C#, Python (опционально) программист</td>\n",
       "      <td>ООО АНС технолоджис</td>\n",
       "      <td>Минск</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Senior Python Developer</td>\n",
       "      <td>ЭкспрессДеньги</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Выставочная</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Python developer</td>\n",
       "      <td>Маглар</td>\n",
       "      <td>Чернигов</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Middle Python Developer</td>\n",
       "      <td>ООО РД Технологии</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Бауманская</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Middle Python Developer</td>\n",
       "      <td>ЭкспрессДеньги</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Выставочная</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Senior Backend-разработчик (Python)</td>\n",
       "      <td>Hoodies</td>\n",
       "      <td>Москва</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Инженер - программист PYTHON (Junior PYTHON)</td>\n",
       "      <td>АО Моринформсистема-Агат, Концерн</td>\n",
       "      <td>Москва</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Python-разработчик (Django, DRF)</td>\n",
       "      <td>ООО Фабрика Решений</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Сухаревская</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>hh.ru</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    vacancy_name  \\\n",
       "0                 Python Developer (New Product)   \n",
       "1                       Data/ML Python Developer   \n",
       "2                               Python developer   \n",
       "3        Python Developer (World of Tanks Blitz)   \n",
       "4                 Junior Data Developer (Python)   \n",
       "5               Middle Python developer (в Сочи)   \n",
       "6                              Python-специалист   \n",
       "7                               Python developer   \n",
       "8                             Python разработчик   \n",
       "9               Junior разработчик Python Django   \n",
       "10                            Разработчик Python   \n",
       "11             Разработчик ботов Python (Junior)   \n",
       "12          C#, Python (опционально) программист   \n",
       "13                       Senior Python Developer   \n",
       "14                              Python developer   \n",
       "15                       Middle Python Developer   \n",
       "16                       Middle Python Developer   \n",
       "17           Senior Backend-разработчик (Python)   \n",
       "18  Инженер - программист PYTHON (Junior PYTHON)   \n",
       "19              Python-разработчик (Django, DRF)   \n",
       "\n",
       "                         company_name      city  metro_station salary_min  \\\n",
       "0                   Wargaming, Moscow     Минск           None       None   \n",
       "1                             Tomi.ai    Москва           None       None   \n",
       "2                             Oxagile     Минск       Михалово       None   \n",
       "3      Wargaming, Minsk (Game Stream)     Минск           None       None   \n",
       "4                            DataFork    Москва        Лубянка       None   \n",
       "5                ООО Привет, Интернет      Сочи           None       None   \n",
       "6              ООО Digital Reputation    Москва  Новокузнецкая       None   \n",
       "7                        NetworkOptix    Москва     Бауманская       None   \n",
       "8                  АО Семейный доктор    Москва    Баррикадная       None   \n",
       "9                     ООО Инсейлс Рус    Москва  Комсомольская       None   \n",
       "10               ООО Доверенная среда    Москва      Румянцево       None   \n",
       "11                              Pyrus    Москва   Панфиловская       None   \n",
       "12                ООО АНС технолоджис     Минск           None       None   \n",
       "13                     ЭкспрессДеньги    Москва    Выставочная       None   \n",
       "14                             Маглар  Чернигов           None       None   \n",
       "15                  ООО РД Технологии    Москва     Бауманская       None   \n",
       "16                     ЭкспрессДеньги    Москва    Выставочная       None   \n",
       "17                            Hoodies    Москва           None       None   \n",
       "18  АО Моринформсистема-Агат, Концерн    Москва           None       None   \n",
       "19                ООО Фабрика Решений    Москва    Сухаревская       None   \n",
       "\n",
       "   salary_max salary_currency   site  \n",
       "0        None            None  hh.ru  \n",
       "1        None            None  hh.ru  \n",
       "2        None            None  hh.ru  \n",
       "3        None            None  hh.ru  \n",
       "4        None            None  hh.ru  \n",
       "5        None            None  hh.ru  \n",
       "6        None            None  hh.ru  \n",
       "7        None            None  hh.ru  \n",
       "8        None            None  hh.ru  \n",
       "9        None            None  hh.ru  \n",
       "10       None            None  hh.ru  \n",
       "11       None            None  hh.ru  \n",
       "12       None            None  hh.ru  \n",
       "13       None            None  hh.ru  \n",
       "14       None            None  hh.ru  \n",
       "15       None            None  hh.ru  \n",
       "16       None            None  hh.ru  \n",
       "17       None            None  hh.ru  \n",
       "18       None            None  hh.ru  \n",
       "19       None            None  hh.ru  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fewer-river",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
