from bs4 import BeautifulSoup as bs
import requests
from pprint import pprint
import re
import pandas as pd
import json
import os
import time


def _parser_WB(nabor):
    #     global parser_WB

    nabor_date = []
    nabor = 'Подарочный набор'
    page = 0
    WB_url = 'https://www.wildberries.ru'

    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '
                             'Chrome/89.0.4389.105 YaBrowser/21.3.3.230 Yowser/2.5 Safari/537.36'}

    params = {'search': nabor,
              'xsearch': 'true',
              'page': page,
              'priceU': '100000;150000'}

    parser_WB = requests.get(WB_url + '/catalog/0/search.aspx', params=params, headers=headers)

    if parser_WB.ok:
        parsed_WB = bs(parser_WB.text, 'html.parser')

    for page in range(0, 10, 1):
        params['page'] = page + 1
        parsed_WB_url = requests.get(WB_url + '/catalog/0/search.aspx', params=params, headers=headers)
        # Необязательная задержка, но чтобы не нагружать сервисы WB, оставим. 5 сек мы может подождать
        time.sleep(0.25)

    if parser_WB.ok:
        parsed_WB = bs(parser_WB.text, 'html.parser')

        nabor_items = parsed_WB.find('span', {'class': 'goods-name c-text-sm'}).getText()

        for item in nabor_items:
            nabor_date.append(_parser_WB_item(item))

    print('Страницы поиска собраны')
    pprint(nabor_date)
    return nabor_date


def _parser_WB_item(item):
    global nabor_name
    nabor_date = {}

    # # nabor_name
    # nabor_name = item.find(int('span', {'class': 'goods-name c-text-sm'}).getText())
    #
    # # final-cost
    # nabor_cost = item.find('ins', {'class': 'lower-price'}).getText()

    for i in item:
        nabor_data = {}
        nabor_name = i.find('span', {'class': 'goods-name c-text-sm'}).getText().split(', ')[0]
        nabor_cost = i.find('ins', {'class': 'lower-price'}).getText()
        nabor_data['vacancy_name'] = nabor_name
        nabor_data['nabor_cost'] = nabor_cost
    if not nabor_name:
        nabor_name = None
    else:
        nabor_name = item.find('span', {'class': 'goods-name c-text-sm'}).getText()

    pprint(nabor_date)
    return nabor_date


def parser_nabor(nabor):
    nabor_date = []
    nabor_date.extend(_parser_WB(nabor))
    nabor = 'Python'
    df = pd.DataFrame(nabor_date)

    return df


nabor = 'Python'
df = parser_nabor(nabor)

#df