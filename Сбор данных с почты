from pprint import pprint
from typing import Dict, Any
from pymongo import MongoClient
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
import time
import hashlib
import json
from decouple import config


username = config('username', default='')
password = config('password', default='')

# chrome_options.add_argument('--headless')

def db_create():
    client = MongoClient('127.0.0.1', 27017)  # ip и порт
    mongo_db = client['data_mail']  # создаём указатель на создание базы данных

    try:
        collection = mongo_db.create_collection('mail')
    except BaseException:
        collection = mongo_db.email

    return collection

# Создаём аргументы
chrome_options = Options()
# Страничка на весь экран
chrome_options.add_argument('start-maximized')
# chrome_options.add_argument('--headless')
driver = webdriver.Chrome(options=chrome_options)
# Входим на сайт

driver.get('https://mail.ru')

# Заходим внутрь страницы, Возьмём login из просмотренного кода
elem = driver.find_element_by_name('login')
elem.send_keys(username)
# Моя почта имеет домен @inbox.ru, выберем его
time.sleep(2)
select = Select(driver.find_element_by_name("domain"))
select.select_by_value("@inbox.ru")
# Дадим странице прогрузиться

# Нажмём на кнопку Ввести пароль
button = WebDriverWait(driver, 2).until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Ввести "
                                                                              "пароль')]")))
button.click()
# Вводим пароль
time.sleep(2)
elem = driver.find_element_by_name('password')
elem.send_keys(password)
# Нажимаем кнопку Войти
button = WebDriverWait(driver, 2).until(EC.element_to_be_clickable((By.XPATH, "//button[@data-testid= 'login-to-mail']")))
button.click()
time.sleep(10)
# Сбор данных из почты
# так как данных очень много, то не будем брезговать time.sleep()
# Сайт без кнопки подбора данных, решаем по методу Picabu
# Чтобы взаимодействовать с сайтом мы смотрим код страницы, ставим время сна для задержки скрола.

# Илья, поверьте while рабочий,но у меня 3200 писем. Ждать долго
# Поэтому просто демонстрирую работу кода, через цикл for

# while True:
#     try:
for i in range(2):
    time.sleep(5)
    container = driver.find_elements_by_css_selector("div.llc__container")
    actions = ActionChains(driver)
    actions.move_to_element(container[-1])
    actions.perform()
    # except:
    #     break

# Убедившись в работе скрола переходим к сбору данных
# all_mail = []
email = driver.find_elements_by_class_name('llc__content')
for mail in email:
    data_mail = {}
    data_mail['sender'] = mail.find_element_by_class_name("ll-crpt").get_attribute("title")
#    data_mail['date'] = mail.find_elements_by_css_selector("llc__item llc__item_date").get_attribute("title")
    data_mail['title'] = mail.find_element_by_class_name("ll-sj__normal").text
    data_mail['body'] = mail.find_element_by_class_name('ll-sp__normal').text
    # all_mail.append(data_mail)
# Собранные данные сохраняем в json и добавляем собранную коллекцию в Mongo_db
    email_binary = json.dumps(data_mail).encode('utf-8')
    mail_hash = hashlib.sha3_256(email_binary)
    mail_id = mail_hash.hexdigest()
    data_mail['_id'] = mail_id

    try:
        collection.insert_one(data_mail)
    except BaseException:
        continue

driver.close()
